#! /usr/bin/bash
set -e

if [ -z "$1" ]; then
  echo "Missing service name argument 'backend-flask' or 'frontend-react-js'."
  exit 1
elif [ -z "$2" ]; then
  echo "Missing argument 'create', 'update', or 'info'."
  exit 2
fi

SCRIPT_PATH=$(dirname $(readlink -f "$0"))
# bin/ecs
BIN_PATH=$(dirname $SCRIPT_PATH)
PROJECT_PATH=$(dirname $BIN_PATH)

CLUSTER_NAME="cruddur"
SERVICE_NAME="$1"
TASK_DEFINTION_FAMILY="${SERVICE_NAME}"

echo -e "CLUSTER: $CLUSTER_NAME\nSERVICE: $SERVICE_NAME\n"

if [ "$2" == "create" ]; then
  echo -e "Creating $1 service...\n"

  aws ecs create-service \
  --cli-input-json "file://$PROJECT_PATH/aws/json/service-${SERVICE_NAME}.json"
else
  aws ecs list-tasks \
  --cluster $CLUSTER_NAME \
  --service $SERVICE_NAME

  LATEST_TASK_DEFINITION_ARN=$(aws ecs describe-task-definition \
    --task-definition $TASK_DEFINTION_FAMILY \
    --query 'taskDefinition.taskDefinitionArn' \
    --output text)

  echo -e "\nTASK DEF ARN:"
  echo -e "\t$LATEST_TASK_DEFINITION_ARN\n"
fi

if [ "$2" == "update" ]; then
  echo -e "Updating service...\n"
  aws ecs update-service \
  --cluster $CLUSTER_NAME \
  --service $SERVICE_NAME \
  --task-definition $LATEST_TASK_DEFINITION_ARN \
  --force-new-deployment
elif [ "$2" == "info" ]; then
  echo -e "Service Info\n"
  aws ecs describe-services \
  --cluster $CLUSTER_NAME \
  --service $SERVICE_NAME \
  --query 'services[0].deployments' \
  --output table
fi
