#!/usr/bin/env python3

import os
import sys
import glob
import re
import time
import importlib

current_path = os.path.dirname(os.path.abspath(__file__))
parent_path = os.path.abspath(os.path.join(current_path, '..', '..','backend-flask'))
sys.path.append(parent_path)
from lib.db import db

def get_last_successful_run():
  sql = """
    SELECT last_successful_run
    FROM public.schema_information
    LIMIT 1
  """
  return int(db.query_value(sql,{},verbose=False))

def set_last_successful_run(value):
  sql = """
  UPDATE schema_information
  SET last_successful_run = %(last_successful_run)s
  WHERE id = 1
  """
  db.query_commit(sql,{'last_successful_run': value},verbose=False)
  return int(value)

last_successful_run = get_last_successful_run()
format_last_successful_run = time.strftime('%Y-%m-%d %I:%M:%S %p', time.gmtime(last_successful_run/1000000000))

migrations_path = os.path.abspath(os.path.join(current_path, '..', '..','backend-flask','migrations'))
sys.path.append(migrations_path)
migration_files = glob.glob(f"{migrations_path}/*.py")


for migration_file in migration_files[::-1]:
  print(f"last_successful_run: {format_last_successful_run}")
  filename = os.path.basename(migration_file)
  module_name = os.path.splitext(filename)[0]
  match = re.match(r'^\d+', filename)
  if match:
    file_time = int(match.group())
    format_file_time= time.strftime('%Y-%m-%d %I:%M:%S %p', time.gmtime(file_time/1000000))
    if last_successful_run <= file_time:
      mod = importlib.import_module(module_name)
      mod.migration.migrate()
      set_last_successful_run(str(time.time_ns()).replace(".",""))
